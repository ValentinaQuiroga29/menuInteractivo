@startuml Sistema_Menu_Interactivo_Componentes

!theme plain
skinparam backgroundColor #FFFFFF
skinparam componentBackgroundColor #F8F9FA
skinparam componentBorderColor #2E3B55
skinparam componentFontColor #2E3B55
skinparam componentFontSize 12
skinparam interfaceBackgroundColor #E8F5E8
skinparam interfaceBorderColor #38A169

title Sistema de Menú Interactivo - Diagrama de Componentes

' ==========================================
' FRONTEND COMPONENTS (REACT)
' ==========================================
package "Frontend (React)" {
    
    component [App.jsx] as App {
        +Routes
        +Route
        +Plantilla
    }
    
    component [Plantilla.jsx] as Plantilla {
        +BarraNavegacion
        +Contenedor
        +Footer
    }
    
    component [CarritoContext.jsx] as CarritoContext {
        +carrito: state
        +agregarAlCarrito()
        +quitarDelCarrito()
        +vaciarCarrito()
    }
    
    component [TarjetaPlatillo.jsx] as TarjetaPlatillo {
        +platillo: props
        +onAgregar: function
        +imagen
        +precio
        +descripcion
    }
    
    component [RutaProtegida.jsx] as RutaProtegida {
        +rolPermitido: string
        +children: ReactNode
        +verificarRol()
    }
    
    package "Páginas" {
        component [Bienvenida.jsx] as Bienvenida {
            +features
            +navegación
        }
        
        component [Menu.jsx] as Menu {
            +platillos: state
            +categorias: state
            +filtros
            +carrito
        }
        
        component [Carrito.jsx] as Carrito {
            +items: state
            +total: state
            +confirmarPedido()
        }
        
        component [PanelAdministracion.jsx] as PanelAdmin {
            +CRUD platillos
            +CRUD usuarios
            +CRUD categorías
            +estadísticas
        }
        
        component [PanelMesero.jsx] as PanelMesero {
            +pedidos pendientes
            +registrar pagos
            +cambiar estados
        }
        
        component [PanelCocina.jsx] as PanelCocina {
            +pedidos en preparación
            +marcar como listo
            +ver detalles
        }
        
        component [InicioSesion.jsx] as Login {
            +formulario
            +autenticación
            +redirección
        }
    }
}

' ==========================================
' BACKEND COMPONENTS (FLASK)
' ==========================================
package "Backend (Flask)" {
    
    component [app.py] as AppFlask {
        +Flask app
        +CORS config
        +blueprints
        +static files
    }
    
    package "Controladores" {
        component [usuario_controlador.py] as UsuarioCtrl {
            +login()
            +registro()
            +perfil()
            +CRUD usuarios
        }
        
        component [platillo_controlador.py] as PlatilloCtrl {
            +listar_platillos()
            +crear_platillo()
            +actualizar_platillo()
            +eliminar_platillo()
            +subir_imagen()
        }
        
        component [pedido_controlador.py] as PedidoCtrl {
            +crear_pedido()
            +cambiar_estado()
            +listar_pedidos()
            +registrar_pago()
        }
        
        component [categoria_controlador.py] as CategoriaCtrl {
            +listar_categorias()
            +crear_categoria()
            +actualizar_categoria()
            +eliminar_categoria()
        }
        
        component [detalle_pedido_controlador.py] as DetalleCtrl {
            +agregar_detalle()
            +actualizar_cantidad()
            +eliminar_detalle()
        }
        
        component [notificacion_controlador.py] as NotifCtrl {
            +enviar_notificacion()
            +marcar_leida()
            +listar_notificaciones()
        }
    }
    
    package "Modelos" {
        component [usuario.py] as UsuarioModel {
            +obtener_usuarios()
            +autenticar()
            +crear_usuario()
            +actualizar_usuario()
        }
        
        component [platillo.py] as PlatilloModel {
            +obtener_platillos()
            +crear_platillo()
            +actualizar_platillo()
            +eliminar_platillo()
        }
        
        component [pedido.py] as PedidoModel {
            +crear_pedido()
            +cambiar_estado()
            +obtener_pedidos()
            +calcular_total()
        }
        
        component [categoria.py] as CategoriaModel {
            +obtener_categorias()
            +crear_categoria()
            +actualizar_categoria()
            +eliminar_categoria()
        }
        
        component [detalle_pedido.py] as DetalleModel {
            +agregar_detalle()
            +actualizar_detalle()
            +eliminar_detalle()
            +calcular_subtotal()
        }
        
        component [notificacion.py] as NotifModel {
            +enviar_notificacion()
            +marcar_leida()
            +obtener_notificaciones()
        }
    }
    
    component [conexion.py] as Conexion {
        +obtener_conexion()
        +configuración MySQL
    }
}

' ==========================================
' BASE DE DATOS
' ==========================================
package "Base de Datos (MySQL)" {
    database [menu_interactivo] as DB {
        [usuarios]
        [platillos]
        [categorias]
        [pedidos]
        [detalles_pedido]
        [notificaciones]
    }
}

' ==========================================
' SERVICIOS EXTERNOS
' ==========================================
package "Servicios Externos" {
    component [Axios] as Axios {
        +HTTP requests
        +interceptors
        +error handling
    }
    
    component [Material-UI] as MUI {
        +componentes UI
        +tema personalizado
        +responsive design
    }
    
    component [React Router] as Router {
        +navegación
        +rutas protegidas
        +historial
    }
    
    component [Framer Motion] as Animations {
        +animaciones
        +transiciones
        +efectos
    }
}

' ==========================================
' INTERFACES
' ==========================================
interface "API REST" as API {
    +GET /usuarios
    +POST /usuarios/login
    +GET /platillos
    +POST /platillos
    +GET /pedidos
    +POST /pedidos
    +PATCH /pedidos/{id}/estado
    +GET /categorias
    +GET /notificaciones
}

interface "Context API" as Context {
    +carrito state
    +usuario state
    +notificaciones state
}

interface "Database Connection" as DBConn {
    +MySQL connector
    +connection pool
    +query execution
}

' ==========================================
' RELACIONES
' ==========================================

' Frontend - Backend
App ..> API : HTTP requests
Menu ..> API : obtener platillos
Carrito ..> API : enviar pedido
Login ..> API : autenticación
PanelAdmin ..> API : CRUD operations
PanelMesero ..> API : gestionar pedidos
PanelCocina ..> API : ver pedidos

' Frontend Components
App --> Plantilla : layout
App --> CarritoContext : state management
Plantilla --> TarjetaPlatillo : render
Menu --> TarjetaPlatillo : items
Carrito --> CarritoContext : state
RutaProtegida --> Login : redirect

' Backend - Database
AppFlask --> Conexion : database access
UsuarioCtrl --> UsuarioModel : data access
PlatilloCtrl --> PlatilloModel : data access
PedidoCtrl --> PedidoModel : data access
CategoriaCtrl --> CategoriaModel : data access
DetalleCtrl --> DetalleModel : data access
NotifCtrl --> NotifModel : data access

' Models - Database
UsuarioModel --> DB : CRUD usuarios
PlatilloModel --> DB : CRUD platillos
PedidoModel --> DB : CRUD pedidos
CategoriaModel --> DB : CRUD categorias
DetalleModel --> DB : CRUD detalles
NotifModel --> DB : CRUD notificaciones

' External Services
App --> Axios : HTTP client
App --> MUI : UI components
App --> Router : navigation
App --> Animations : effects

' Interfaces
API --> AppFlask : REST endpoints
Context --> App : state management
DBConn --> Conexion : database connection

' ==========================================
' NOTAS EXPLICATIVAS
' ==========================================
note top of App
  Componente raíz que maneja
  el enrutamiento y la estructura
  general de la aplicación
end note

note top of CarritoContext
  Context de React para manejo
  global del estado del carrito
  de compras
end note

note top of AppFlask
  Servidor Flask principal
  que coordina todos los
  controladores y rutas
end note

note top of DB
  Base de datos MySQL con
  6 tablas principales para
  gestionar toda la información
end note

note top of API
  Interfaz REST que permite
  la comunicación entre
  frontend y backend
end note

@enduml 